Index: apps/customers/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\n\n\n\nfrom Util.utils import SearchMan\nfrom apps.customers.forms import BusinessTypeForm,AgentShiftForm\nfrom .models import BusnessType,AgentShift\nfrom django.views.generic import ListView, FormView\nfrom django.contrib import messages\nfrom django.utils.translation import gettext_lazy as _\nfrom Util.static_strings import (\n                                 NO_RECORDS_FOR_BUSINESS_TYPE_MODEL_ADMIN_MESSAGE,\n                                 NO_RECORDS_FOR_BUSINESS_TYPE_MODEL_MONITOR_MESSAGE,\n                                 NO_RECORDS_FOR_AGENT_SHIFT_MODEL_ADMIN_MESSAGE,\n                                 NO_RECORDS_FOR_AGENT_SHIFT_MODEL_MONITOR_MESSAGE\n\n                                 )\nfrom Util.utils import OulougGroupPermission\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\n# Create your views here.\n\n\n\n\n\"\"\"\nBusiness Type FormView:\nThis class is used to represent the add state view , \nit allows only ouloug_admin users to access it\n\"\"\"\nclass BusinessTypeFormView(OulougGroupPermission, FormView):\n    # specify template name used to add new business_type\n    template_name = 'business_type/add_business_type.html'\n    # specify the form used\n    form_class = BusinessTypeForm\n    # specify the page to return to after successfully adding new currency\n    success_url = 'business'\n    # specify user's groups allowed to access this view\n    permission_required = ('administrator')\n\n    # check if the form is valid or not after submitting it\n    def post(self, request, *args, **kwargs):\n        form = BusinessTypeForm(request.POST)\n        if self.form_valid(form):\n            print(\"valid\")\n        else:\n            for field, items in form.errors.items():\n                for item in items:\n                    messages.error(request, '{}: {}'.format(field, item))\n        return super().get(request)\n\n    def form_valid(self, form):\n        # return added  business_name\n        business_name = self.request.POST['name']\n        # save form data if form is valid\n        form.save()\n        # present success message to the user\n        messages.success(self.request, f\"Business {business_name} Added Successfully\")\n        # return the control to the original overridden function in the super class\n        return super().form_valid(form)\n\n    # priovided the required extra context for the view\n    extra_context = {\n        'masters': 'active',\n        'business_types': 'active',\n        'title': 'Add Business Type'\n    }\n\n\n\"\"\"\nBusinessTypeListView:\nThis class is used to view all added business types in the system,\nit allows only administrators and monitor users to  \naccess.\n\"\"\"\nclass BusinessTypeListView(OulougGroupPermission, ListView):\n    # specify the model used in the view\n    model = BusnessType\n    # specify the template in the view\n    template_name = \"business_type/business_type_list.html\"\n    # adding active flag for the sidebar active link\n\n    # adding the view's title\n    title = \"Business Type\"\n    permission_denied_message = _(\"Sorry you do not have access to this page\")\n    # adding the required extra context\n    extra_context = {\n        'title': title,\n        'masters': 'active',\n        'business_types': 'active',\n        'no_records_admin': NO_RECORDS_FOR_BUSINESS_TYPE_MODEL_ADMIN_MESSAGE,\n        'no_records_monitor': NO_RECORDS_FOR_BUSINESS_TYPE_MODEL_MONITOR_MESSAGE\n    }\n    searchManObj = SearchMan(\"Business_Type\")\n \n    # return default queryset used in this view\n    def get_queryset(self):\n        return BusnessType.objects.all().order_by('-id')\n\n    # def post(self, request, *args, **kwargs):\n    #     queryset = self.get_queryset()\n    #     paginator = Paginator(queryset, 5)\n    #     if request.POST.get('search_phrase') != '' and request.POST.get('search_options') == 'start_date':\n    #         search_message = request.POST.get('search_phrase')\n    #         self.search_result = Offer.objects.all().filter(\n    #             name=search_message).order_by('-id')\n    #         self.searchManObj.setPaginator(self.search_result)\n    #         self.searchManObj.setSearchPhrase(search_message)\n    #         self.searchManObj.setSearchOption('Offer Start Date')\n    #         self.searchManObj.setSearchError(False)\n    #     if 'clear' not in request.POST:\n    #         self.searchManObj.setSearch(True)\n    #     if request.POST.get('clear') == 'clear':\n    #         offers = self.get_queryset()\n    #         self.searchManObj.setPaginator(offers)\n    #         self.searchManObj.setSearch(False)\n    #     if request.GET.get('page'):\n    #         # Grab the current page from query parameter consultant\n    #         page = int(request.GET.get('page'))\n    #     else:\n    #         page = None\n    #\n    #     try:\n    #         paginator = self.searchManObj.getPaginator()\n    #         offers = paginator.page(page)\n    #         # Create a page object for the current page.\n    #     except PageNotAnInteger:\n    #         # If the query parameter is empty then grab the first page.\n    #         offers = paginator.page(1)\n    #         page = 1\n    #     except EmptyPage:\n    #         # If the query parameter is greater than num_pages then grab the last page.\n    #         offers = paginator.page(paginator.num_pages)\n    #         page = paginator.num_pages\n    #     self.extra_context = {\n    #         'offers': 'active',\n    #         self.active_flag: 'active',\n    #         'page_range': paginator.page_range,\n    #         'num_pages': paginator.num_pages,\n    #         'offers_list': offers,\n    #         'search': self.searchManObj.getSearch(),\n    #         'search_result': self.search_result,\n    #         'search_phrase': self.searchManObj.getSearchPhrase(),\n    #         'search_option': self.searchManObj.getSearchOption(),\n    #         'search_error': self.searchManObj.getSearchError(),\n    #         'clear_search_tip': CLEAR_SEARCH_TIP,\n    #         'search_offers_tip': SEARCH_OFFERS_TIP,\n    #         'current_page': page,\n    #         'title':self.title\n    #     }\n    #     return super().get(request)\n\n    def get(self, request, *args, **kwargs):\n        queryset = self.get_queryset()\n        paginator = Paginator(queryset, 5)\n        if 'page' not in request.GET:\n            states = BusnessType.objects.all().order_by('-id')\n            self.searchManObj.setPaginator(states)\n            self.searchManObj.setSearch(False)\n        if request.GET.get('page'):\n            # Grab the current page from query parameter consultant\n            page = int(request.GET.get('page'))\n        else:\n            page = None\n\n        try:\n            paginator = self.searchManObj.getPaginator()\n            states = paginator.page(page)\n            # Create a page object for the current page.\n        except PageNotAnInteger:\n            # If the query parameter is empty then grab the first page.\n            states = paginator.page(1)\n            page = 1\n        except EmptyPage:\n            # If the query parameter is greater than num_pages then grab the last page.\n            states = paginator.page(paginator.num_pages)\n            page = paginator.num_pages\n        self.extra_context.update({\n            'masters': 'active',\n            'page_range': paginator.page_range,\n            'num_pages': paginator.num_pages,\n            'object_list': BusinessTypeForm,\n            # 'search': self.searchManObj.getSearch(),\n            # 'search_result': self.search_result,\n            # 'search_phrase': self.searchManObj.getSearchPhrase(),\n            # 'search_option': self.searchManObj.getSearchOption(),\n            # 'search_error': self.searchManObj.getSearchError(),\n            'current_page': page,\n            'title': self.title\n        })\n        return super().get(request)\n\n\n\"\"\"\nAgent Shift FormView:\nThis class is used to represent the add agent shifts view , \nit allows only ouloug_admin users to access it\n\"\"\"\n\n\nclass AgentShiftFormView(OulougGroupPermission, FormView):\n    # specify template name used to add new business_type\n    template_name = 'agent_shift/add_agent_shifts.html'\n    # specify the form used\n    form_class = AgentShiftForm\n    # specify the page to return to after successfully adding new currency\n    success_url = 'agentShifts'\n    # specify user's groups allowed to access this view\n    permission_required = ('administrator')\n\n    # check if the form is valid or not after submitting it\n    def post(self, request, *args, **kwargs):\n        form = BusinessTypeForm(request.POST)\n        if self.form_valid(form):\n            print(\"valid\")\n        else:\n            for field, items in form.errors.items():\n                for item in items:\n                    messages.error(request, '{}: {}'.format(field, item))\n        return super().get(request)\n\n    def form_valid(self, form):\n        # return added  business_name\n        shift_name = self.request.POST['name']\n        # save form data if form is valid\n        form.save()\n        # present success message to the user\n        messages.success(self.request, f\"Shift {shift_name} Added Successfully\")\n        # return the control to the original overridden function in the super class\n        return super().form_valid(form)\n\n    # priovided the required extra context for the view\n    extra_context = {\n        'ouloug_services': 'active',\n        'agent_shifts': 'active',\n        'title': 'Add Agent Shifts'\n    }\n\n\n\"\"\"\nAgentShiftListView:\nThis class is used to view all added agent shifts in the system,\nit allows only administrators and monitor users to  \naccess.\n\"\"\"\n\n\nclass AgentShiftListView(OulougGroupPermission, ListView):\n    # specify the model used in the view\n    model = AgentShift\n    # specify the template in the view\n    template_name = \"agent_shift/agent_shift_list.html\"\n    # adding active flag for the sidebar active link\n\n    # adding the view's title\n    title = \"Agent Shifts\"\n    permission_denied_message = _(\"Sorry you do not have access to this page\")\n    # adding the required extra context\n    extra_context = {\n        'title': title,\n        'ouloug_Services': 'active',\n        'agent_shifts': 'active',\n        'no_records_admin': NO_RECORDS_FOR_AGENT_SHIFT_MODEL_ADMIN_MESSAGE,\n        'no_records_monitor': NO_RECORDS_FOR_AGENT_SHIFT_MODEL_MONITOR_MESSAGE\n    }\n    searchManObj = SearchMan(\"AgentShift\")\n\n    # return default queryset used in this view\n    def get_queryset(self):\n        return AgentShift.objects.all().order_by('-id')\n\n    # def post(self, request, *args, **kwargs):\n    #     queryset = self.get_queryset()\n    #     paginator = Paginator(queryset, 5)\n    #     if request.POST.get('search_phrase') != '' and request.POST.get('search_options') == 'start_date':\n    #         search_message = request.POST.get('search_phrase')\n    #         self.search_result = Offer.objects.all().filter(\n    #             name=search_message).order_by('-id')\n    #         self.searchManObj.setPaginator(self.search_result)\n    #         self.searchManObj.setSearchPhrase(search_message)\n    #         self.searchManObj.setSearchOption('Offer Start Date')\n    #         self.searchManObj.setSearchError(False)\n    #     if 'clear' not in request.POST:\n    #         self.searchManObj.setSearch(True)\n    #     if request.POST.get('clear') == 'clear':\n    #         offers = self.get_queryset()\n    #         self.searchManObj.setPaginator(offers)\n    #         self.searchManObj.setSearch(False)\n    #     if request.GET.get('page'):\n    #         # Grab the current page from query parameter consultant\n    #         page = int(request.GET.get('page'))\n    #     else:\n    #         page = None\n    #\n    #     try:\n    #         paginator = self.searchManObj.getPaginator()\n    #         offers = paginator.page(page)\n    #         # Create a page object for the current page.\n    #     except PageNotAnInteger:\n    #         # If the query parameter is empty then grab the first page.\n    #         offers = paginator.page(1)\n    #         page = 1\n    #     except EmptyPage:\n    #         # If the query parameter is greater than num_pages then grab the last page.\n    #         offers = paginator.page(paginator.num_pages)\n    #         page = paginator.num_pages\n    #     self.extra_context = {\n    #         'offers': 'active',\n    #         self.active_flag: 'active',\n    #         'page_range': paginator.page_range,\n    #         'num_pages': paginator.num_pages,\n    #         'offers_list': offers,\n    #         'search': self.searchManObj.getSearch(),\n    #         'search_result': self.search_result,\n    #         'search_phrase': self.searchManObj.getSearchPhrase(),\n    #         'search_option': self.searchManObj.getSearchOption(),\n    #         'search_error': self.searchManObj.getSearchError(),\n    #         'clear_search_tip': CLEAR_SEARCH_TIP,\n    #         'search_offers_tip': SEARCH_OFFERS_TIP,\n    #         'current_page': page,\n    #         'title':self.title\n    #     }\n    #     return super().get(request)\n\n    def get(self, request, *args, **kwargs):\n        queryset = self.get_queryset()\n        paginator = Paginator(queryset, 5)\n        if 'page' not in request.GET:\n            agentShifts = AgentShift.objects.all().order_by('-id')\n            self.searchManObj.setPaginator(agentShifts)\n            self.searchManObj.setSearch(False)\n        if request.GET.get('page'):\n            # Grab the current page from query parameter consultant\n            page = int(request.GET.get('page'))\n        else:\n            page = None\n\n        try:\n            paginator = self.searchManObj.getPaginator()\n            agentShifts = paginator.page(page)\n            # Create a page object for the current page.\n        except PageNotAnInteger:\n            # If the query parameter is empty then grab the first page.\n            agentShifts = paginator.page(1)\n            page = 1\n        except EmptyPage:\n            # If the query parameter is greater than num_pages then grab the last page.\n            agentShifts = paginator.page(paginator.num_pages)\n            page = paginator.num_pages\n        self.extra_context.update({\n            'ouloug_services': 'active',\n            'page_range': paginator.page_range,\n            'num_pages': paginator.num_pages,\n            'object_list': BusinessTypeForm,\n            # 'search': self.searchManObj.getSearch(),\n            # 'search_result': self.search_result,\n            # 'search_phrase': self.searchManObj.getSearchPhrase(),\n            # 'search_option': self.searchManObj.getSearchOption(),\n            # 'search_error': self.searchManObj.getSearchError(),\n            'current_page': page,\n            'title': self.title\n        })\n        return super().get(request)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/customers/views.py b/apps/customers/views.py
--- a/apps/customers/views.py	
+++ b/apps/customers/views.py	
@@ -3,8 +3,8 @@
 
 
 from Util.utils import SearchMan
-from apps.customers.forms import BusinessTypeForm,AgentShiftForm
-from .models import BusnessType,AgentShift
+from apps.customers.forms import BusinessTypeForm,AgentShiftForm,CustomerCallForm
+from .models import BusnessType,AgentShift,CustomerCall
 from django.views.generic import ListView, FormView
 from django.contrib import messages
 from django.utils.translation import gettext_lazy as _
@@ -12,7 +12,8 @@
                                  NO_RECORDS_FOR_BUSINESS_TYPE_MODEL_ADMIN_MESSAGE,
                                  NO_RECORDS_FOR_BUSINESS_TYPE_MODEL_MONITOR_MESSAGE,
                                  NO_RECORDS_FOR_AGENT_SHIFT_MODEL_ADMIN_MESSAGE,
-                                 NO_RECORDS_FOR_AGENT_SHIFT_MODEL_MONITOR_MESSAGE
+                                 NO_RECORDS_FOR_AGENT_SHIFT_MODEL_MONITOR_MESSAGE,
+                                 NO_RECORDS_FOR_CUSTOMER_CALL_MODEL_MESSAGE
 
                                  )
 from Util.utils import OulougGroupPermission
@@ -242,8 +243,6 @@
 it allows only administrators and monitor users to  
 access.
 """
-
-
 class AgentShiftListView(OulougGroupPermission, ListView):
     # specify the model used in the view
     model = AgentShift
@@ -361,3 +360,125 @@
         })
         return super().get(request)
 
+
+"""
+CustomerCallListView:
+This class is used to view all added customer calls in the system,
+it allows only administrators and monitor users to  
+access.
+"""
+class CustomerCallListView(OulougGroupPermission, ListView):
+    # specify the model used in the view
+    model = CustomerCall
+    # specify the template in the view
+    template_name = "customer_call/customer_call_list.html"
+    # adding the view's title
+    title = "Customer Calls"
+    permission_denied_message = _("Sorry you do not have access to this page")
+    # adding the required extra context
+    extra_context = {
+        'title': title,
+        'customers': 'active',
+        'customer_call': 'active',
+        'no_records_admin': NO_RECORDS_FOR_CUSTOMER_CALL_MODEL_MESSAGE,
+        'no_records_monitor': NO_RECORDS_FOR_CUSTOMER_CALL_MODEL_MESSAGE
+    }
+    searchManObj = SearchMan("CustomerCall")
+
+    # return default queryset used in this view
+    def get_queryset(self):
+        return CustomerCall.objects.all().order_by('-id')
+
+    # def post(self, request, *args, **kwargs):
+    #     queryset = self.get_queryset()
+    #     paginator = Paginator(queryset, 5)
+    #     if request.POST.get('search_phrase') != '' and request.POST.get('search_options') == 'start_date':
+    #         search_message = request.POST.get('search_phrase')
+    #         self.search_result = Offer.objects.all().filter(
+    #             name=search_message).order_by('-id')
+    #         self.searchManObj.setPaginator(self.search_result)
+    #         self.searchManObj.setSearchPhrase(search_message)
+    #         self.searchManObj.setSearchOption('Offer Start Date')
+    #         self.searchManObj.setSearchError(False)
+    #     if 'clear' not in request.POST:
+    #         self.searchManObj.setSearch(True)
+    #     if request.POST.get('clear') == 'clear':
+    #         offers = self.get_queryset()
+    #         self.searchManObj.setPaginator(offers)
+    #         self.searchManObj.setSearch(False)
+    #     if request.GET.get('page'):
+    #         # Grab the current page from query parameter consultant
+    #         page = int(request.GET.get('page'))
+    #     else:
+    #         page = None
+    #
+    #     try:
+    #         paginator = self.searchManObj.getPaginator()
+    #         offers = paginator.page(page)
+    #         # Create a page object for the current page.
+    #     except PageNotAnInteger:
+    #         # If the query parameter is empty then grab the first page.
+    #         offers = paginator.page(1)
+    #         page = 1
+    #     except EmptyPage:
+    #         # If the query parameter is greater than num_pages then grab the last page.
+    #         offers = paginator.page(paginator.num_pages)
+    #         page = paginator.num_pages
+    #     self.extra_context = {
+    #         'offers': 'active',
+    #         self.active_flag: 'active',
+    #         'page_range': paginator.page_range,
+    #         'num_pages': paginator.num_pages,
+    #         'offers_list': offers,
+    #         'search': self.searchManObj.getSearch(),
+    #         'search_result': self.search_result,
+    #         'search_phrase': self.searchManObj.getSearchPhrase(),
+    #         'search_option': self.searchManObj.getSearchOption(),
+    #         'search_error': self.searchManObj.getSearchError(),
+    #         'clear_search_tip': CLEAR_SEARCH_TIP,
+    #         'search_offers_tip': SEARCH_OFFERS_TIP,
+    #         'current_page': page,
+    #         'title':self.title
+    #     }
+    #     return super().get(request)
+
+    def get(self, request, *args, **kwargs):
+        queryset = self.get_queryset()
+        paginator = Paginator(queryset, 5)
+        if 'page' not in request.GET:
+            customerCalls = CustomerCall.objects.all().order_by('-id')
+            self.searchManObj.setPaginator(customerCalls)
+            self.searchManObj.setSearch(False)
+        if request.GET.get('page'):
+            # Grab the current page from query parameter consultant
+            page = int(request.GET.get('page'))
+        else:
+            page = None
+
+        try:
+            paginator = self.searchManObj.getPaginator()
+            customerCalls = paginator.page(page)
+            # Create a page object for the current page.
+        except PageNotAnInteger:
+            # If the query parameter is empty then grab the first page.
+            customerCalls = paginator.page(1)
+            page = 1
+        except EmptyPage:
+            # If the query parameter is greater than num_pages then grab the last page.
+            customerCalls = paginator.page(paginator.num_pages)
+            page = paginator.num_pages
+        self.extra_context.update({
+            'customer_calls': 'active',
+            'page_range': paginator.page_range,
+            'num_pages': paginator.num_pages,
+            'object_list': BusinessTypeForm,
+            # 'search': self.searchManObj.getSearch(),
+            # 'search_result': self.search_result,
+            # 'search_phrase': self.searchManObj.getSearchPhrase(),
+            # 'search_option': self.searchManObj.getSearchOption(),
+            # 'search_error': self.searchManObj.getSearchError(),
+            'current_page': page,
+            'title': self.title
+        })
+        return super().get(request)
+
Index: Util/static_strings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.utils.translation import gettext_lazy as _\n\n# registration form strings\nFIRST_NAME_SYNTAX_ERROR = _(\"First Name Contains Only Alphanumeric Characters!\")\nSECOND_NAME_SYNTAX_ERROR = _(\"Second Name Contains Only Alphanumeric Characters!\")\nTHIRD_NAME_SYNTAX_ERROR = _(\"Third Name Contains Only Alphanumeric Characters!\")\nFOURTH_NAME_SYNTAX_ERROR = _(\"Fourth Name Contains Only Alphanumeric Characters!\")\nFIRST_NAME_EMPTY_ERROR = _(\"First Name Cannot Be Empty!\")\nSECOND_NAME_EMPTY_ERROR = _(\"Second Name Cannot Be Empty!\")\nTHIRD_NAME_EMPTY_ERROR = _(\"Third Name Cannot Be Empty!\")\nFOURTH_NAME_EMPTY_ERROR = _(\"Fourth Name Cannot Be Empty!\")\nEMAIL_SYNTAX_ERROR = _(\"Please Check Your Email Syntax!\")\nEMAIL_EMPTY_ERROR = _(\"Email Cannot Be Empty!\")\nPHONE_NUMBER_SYNTAX_ERROR = _(\"Please Check Your Phone Number Syntax!\")\nPHONE_PHONE_EMPTY_ERROR = _(\"Phone Number Cannot Be Empty!\")\nPASSWORDS_NOT_MATCH = _(\"Passwords are Not Match!\")\n\n\n\n# login form strings\nUSERNAME_EMPTY_ERROR = _(\"Username cannot be empty!\")\nPASSWORD_EMPTY_ERROR = _(\"Password cannot be empty!\")\nCONFIRM_PASSWORD_EMPTY_ERROR = _(\"Confirm Password cannot be empty!\")\nUSERNAME_BAD_FORMAT = _(\"Username Contains at Least 6 Characters With Only Alphanumeric Characters and Underscores !\")\n\n\n\n# NO RECORDS FOUND STRINGS - Country Pages\nNO_RECORDS_FOR_COUNTRY_MODEL_ADMIN_MESSAGE = _(\"There are no countries yet ... you can add new countries from \")\nNO_RECORDS_FOR_COUNTRY_MODEL_MONITOR_MESSAGE = _(\"There are no countries yet to view\")\n\n# NO RECORDS FOUND STRINGS - City Pages\nNO_RECORDS_FOR_CITY_MODEL_ADMIN_MESSAGE = _(\"There are no cities yet ... you can add new cities from \")\nNO_RECORDS_FOR_CITY_MODEL_MONITOR_MESSAGE = _(\"There are no cities yet to view\")\n\n# NO RECORDS FOUND STRINGS - State Pages\nNO_RECORDS_FOR_STATE_MODEL_ADMIN_MESSAGE = _(\"There are no states yet ... you can add new states from \")\nNO_RECORDS_FOR_STATE_MODEL_MONITOR_MESSAGE = _(\"There are no states yet to view\")\n\n\n# NO RECORDS FOUND STRINGS - Currency Pages\nNO_RECORDS_FOR_CURRENCY_MODEL_ADMIN_MESSAGE = _(\"There are no currencies yet ... you can add new currencies from \")\nNO_RECORDS_FOR_CURRENCY_MODEL_MONITOR_MESSAGE = _(\"There are no currencies yet to view\")\n\n\n# NO RECORDS FOUND STRINGS - Business_type Pages\nNO_RECORDS_FOR_BUSINESS_TYPE_MODEL_ADMIN_MESSAGE = _(\"There are no business types yet ... you can add new business types from \")\nNO_RECORDS_FOR_BUSINESS_TYPE_MODEL_MONITOR_MESSAGE = _(\"There are no business types yet to view\")\n\n\n# NO RECORDS FOUND STRINGS - Service Pages\nNO_RECORDS_FOR_SERVICE_MODEL_ADMIN_MESSAGE = _(\"There are no services yet ... you can add new services from \")\nNO_RECORDS_FOR_SERVICE_MODEL_MONITOR_MESSAGE = _(\"There are no services yet to view\")\n\n# NO RECORDS FOUND STRINGS - Package Pages\nNO_RECORDS_FOR_PACKAGE_MODEL_ADMIN_MESSAGE = _(\"There are no packages yet ... you can add new packages from \")\nNO_RECORDS_FOR_PACKAGE_MODEL_MONITOR_MESSAGE = _(\"There are no packages yet to view\")\n\n# NO RECORDS FOUND STRINGS - Teams Pages\nNO_RECORDS_FOR_TEAM_MODEL_ADMIN_MESSAGE = _(\"There are no teams yet ... you can add new teams from \")\nNO_RECORDS_FOR_TEAM_MODEL_MONITOR_MESSAGE = _(\"There are no teams yet to view\")\n\n# NO RECORDS FOUND STRINGS - Agent Shift Pages\nNO_RECORDS_FOR_AGENT_SHIFT_MODEL_ADMIN_MESSAGE = _(\"There are no agent shifts yet ... you can add new agent shifts from \")\nNO_RECORDS_FOR_AGENT_SHIFT_MODEL_MONITOR_MESSAGE = _(\"There are no agent shifts yet to view\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Util/static_strings.py b/Util/static_strings.py
--- a/Util/static_strings.py	
+++ b/Util/static_strings.py	
@@ -63,3 +63,6 @@
 # NO RECORDS FOUND STRINGS - Agent Shift Pages
 NO_RECORDS_FOR_AGENT_SHIFT_MODEL_ADMIN_MESSAGE = _("There are no agent shifts yet ... you can add new agent shifts from ")
 NO_RECORDS_FOR_AGENT_SHIFT_MODEL_MONITOR_MESSAGE = _("There are no agent shifts yet to view")
+
+# NO RECORDS FOUND STRINGS - Customer Call Pages
+NO_RECORDS_FOR_CUSTOMER_CALL_MODEL_MESSAGE = _("There are no customer calls yet")
Index: apps/templates/includes/sidebar.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% load check_user_group %}\n{% load static i18n %}\n\n    <nav class=\"pcoded-navbar\">\n        <div class=\"navbar-wrapper\">\n            <div class=\"navbar-brand header-logo\">\n                <a target=\"_blank\" \n                   href=\"#\" class=\"b-brand\">\n                    <div >\n                        <img src=\"/static/assets/images/ouloug.png\" class=\"sidebar-image\" alt=\"not found\">\n                    </div>\n                    <span class=\"b-title\"> Ouloug Administration Portal </span>\n                </a>\n                <a class=\"mobile-menu\" id=\"mobile-collapse\" href=\"javascript:\"><span></span></a>\n            </div>\n            <div class=\"navbar-content scroll-div\">\n                <ul class=\"nav pcoded-inner-navbar\">\n                    <li class=\"nav-item pcoded-menu-caption\">\n                     <!--  <label>Navigation</label>--> \n                    </li>\n                    <li data-username=\"dashboard Default Ecommerce CRM Analytics Crypto Project\" \n                        class=\"nav-item {% if 'index' in segment %} active {% endif %}\">\n                        <a href=\"/\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-home\"></i></span><span class=\"pcoded-mtext\">Dashboard</span></a>\n                    </li>\n<!--                    <li class=\"nav-item pcoded-menu-caption\">-->\n<!--                        <label>UI Element</label>-->\n<!--                    </li>-->\n<!--                    <li data-username=\"basic components Button Alert Badges breadcrumb Paggination progress Tooltip popovers Carousel Cards Collapse Tabs pills Modal Grid System Typography Extra Shadows Embeds\" class=\"nav-item pcoded-hasmenu\">-->\n<!--                        <a href=\"javascript:\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-box\"></i></span><span class=\"pcoded-mtext\">Components</span></a>-->\n<!--                        <ul class=\"pcoded-submenu\">-->\n<!--                            <li class=\"\"><a href=\"/ui-button.html\" class=\"\">Button</a></li>-->\n<!--                            <li class=\"\"><a href=\"/ui-badges.html\" class=\"\">Badges</a></li>-->\n<!--                            <li class=\"\"><a href=\"/ui-breadcrumb-pagination.html\" class=\"\">Breadcrumb & paggination</a></li>-->\n<!--                            <li class=\"\"><a href=\"/ui-collapse.html\" class=\"\">Collapse</a></li>-->\n<!--                            <li class=\"\"><a href=\"/ui-tabs.html\" class=\"\">Tabs & pills</a></li>-->\n<!--                            <li class=\"\"><a href=\"/ui-typography.html\" class=\"\">Typography</a></li>-->\n<!--                            <li class=\"\"><a href=\"/ui-icons.html\" class=\"\">Feather<span class=\"pcoded-badge label label-danger\">NEW</span></a></li>-->\n<!--                        </ul>-->\n<!--                    </li>-->\n<!--   allow only for ouloug monitor and ouloug admin groups                 -->\n<!--                    if request.user|has_group:\"ouloug_monitor\" or request.user|has_group:\"ouloug_admin\" -->\n{% if request.user.is_authenticated  %}\n                    {% if request.user.user_type == \"administrator\" or request.user.user_type == \"monitor\" %}\n\n\n                             <li data-username=\"basic components Button Alert Badges breadcrumb Paggination progress Tooltip popovers Carousel Cards Collapse Tabs pills Modal Grid System Typography Extra Shadows Embeds\" class=\"nav-item pcoded-hasmenu\">\n                        <a href=\"javascript:\" class=\"nav-link {{masters}} \"><span class=\"pcoded-micon\"><i class=\"feather icon-box\"></i></span><span class=\"pcoded-mtext\">Masters</span></a>\n                        <ul class=\"pcoded-submenu\">\n                            <li class=\"\"><a href=\"{% url 'countriesList' %}\" class=\"{{countries}}\">{% trans 'Countries' %}</a></li>\n                            <li class=\"\"><a href=\"{% url 'statesList' %}\" class=\"{{states}}\">States</a></li>\n                            <li class=\"\"><a href=\"{% url 'citiesList' %}\" class=\"{{cities}}\">{% trans 'Cities' %}</a></li>\n                            <li class=\"\"><a href=\"{% url 'currenciesList' %}\" class=\"{{currencies}}\">Currencies</a></li>\n<<<<<<< HEAD\n                            <li class=\"\"><a href=\"{% url 'businessList' %}\"  class=\"\">Business Types</a></li>\n                            <li class=\"\"><a href=\"{% url 'teamsList' %}\" class=\"\">Teams/Departments</a></li>\n                            <li class=\"\"><a href=\"{% url 'telecomsList' %}\"  class=\"\">Telecom Operator</a></li>\n=======\n                            <li class=\"\"><a href=\"{% url 'businessList' %}\" class=\"{{business_types}}\">Business Types</a></li>\n                            <li class=\"\"><a href=\"{% url 'teamsList' %}\" class=\"{{teams_departments}}\">Teams/Departments</a></li>\n                            <li class=\"\"><a href=\"/ui-icons.html\" class=\"\">Telecom Operator</a></li>\n>>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d\n                            <li class=\"\"><a href=\"/ui-icons.html\" class=\"\">Billing Cycle</a></li>\n                        </ul>\n                    </li>\n                    {% endif %}\n                    {% endif %}\n                    <li class=\"nav-item pcoded-menu-caption\">\n                        <label>Ouloug Services</label>\n                    </li>\n<!--                    <li data-username=\"form elements advance componant validation masking wizard picker select\" -->\n<!--                        class=\"nav-item {% if 'ui-forms' in segment %} active {% endif %}\">-->\n<!--                        <a href=\"/ui-forms.html\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-file-text\"></i></span><span class=\"pcoded-mtext\">Form elements</span></a>-->\n<!--                    </li>-->\n<!--                    <li data-username=\"Table bootstrap datatable footable\" -->\n<!--                        class=\"nav-item {% if 'ui-tables' in segment %} active {% endif %}\">-->\n<!--                        <a href=\"/ui-tables.html\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-server\"></i></span><span class=\"pcoded-mtext\">Table</span></a>-->\n<!--                    </li>-->\n                                           <li data-username=\"ouloug services\" class=\"nav-item pcoded-hasmenu\">\n                        <a href=\"javascript:\" class=\"nav-link {{ouloug_services}} \"><span class=\"pcoded-micon\"><i class=\"feather icon-grid\"></i></span><span class=\"pcoded-mtext\">Ouloug Services</span></a>\n                        <ul class=\"pcoded-submenu\">\n                            <li class=\"\"><a href=\"{% url 'servicesList' %}\" class=\"{{services}}\">{% trans 'Services' %}</a></li>\n                            <li class=\"\"><a href=\"{% url 'packagesList' %}\" class=\"{{packages}}\">{% trans 'Packages' %}</a></li>\n                            <li class=\"\"><a href=\"{% url 'agentShiftsList' %}\" class=\"{{agent_shifts}}\">{% trans 'Agent Shifts' %}</a></li>\n                            <li class=\"\"><a href=\"/ui-collapse.html\" class=\"\">{% trans 'Telecom Phone Numbers' %}</a></li>\n                        </ul>\n                    </li>\n\n\n                                                               <li data-username=\"ouloug services\" class=\"nav-item pcoded-hasmenu\">\n                        <a href=\"javascript:\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-grid\"></i></span><span class=\"pcoded-mtext\">Customers</span></a>\n                        <ul class=\"pcoded-submenu\">\n                            <li class=\"\"><a href=\"/ui-button.html\" class=\"\">Customer's List</a></li>\n                            <li class=\"\"><a href=\"/ui-badges.html\" class=\"\">Customer Calls</a></li>\n                            <li class=\"\"><a href=\"/ui-breadcrumb-pagination.html\" class=\"\">Payments</a></li>\n                            <li class=\"\"><a href=\"/ui-collapse.html\" class=\"\">Telecom Phone Numbers</a></li>\n                        </ul>\n                    </li>\n<!--                    if request.user|has_group:\"ouloug_monitor\" or request.user|has_group:\"ouloug_admin\" -->\n                         {% if request.user.is_authenticated  %}\n                    {% if user.user_type == \"administrator\" or user.user_type == \"monitor\"%}\n\n\n                                                               <li data-username=\"ouloug services\" class=\"nav-item pcoded-hasmenu\">\n                        <a href=\"javascript:\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-grid\"></i></span><span class=\"pcoded-mtext\">Integration Reports</span></a>\n                        <ul class=\"pcoded-submenu\">\n                            <li class=\"\"><a href=\"/ui-button.html\" class=\"\">Customers</a></li>\n                            <li class=\"\"><a href=\"/ui-badges.html\" class=\"\">Calls Per Customers</a></li>\n                            <li class=\"\"><a href=\"/ui-breadcrumb-pagination.html\" class=\"\">Calls Per Operator</a></li>\n                            <li class=\"\"><a href=\"/ui-collapse.html\" class=\"\">Payments</a></li>\n                        </ul>\n                    </li>\n                    {% endif %}\n                    {% endif %}\n                                                     <li class=\"nav-item pcoded-menu-caption\">\n                        <label>Settings</label>\n                    </li>\n                        <li class=\"nav-item pcoded-menu-caption\">\n                        <label>Settings</label>\n                    </li>\n                                <li data-username=\"ouloug services\" class=\"nav-item pcoded-hasmenu\">\n                        <a href=\"javascript:\" class=\"nav-link {{ouloug_services}} \"><span class=\"pcoded-micon\"><i class=\"feather icon-grid\"></i></span><span class=\"pcoded-mtext\">Settings</span></a>\n                     <!--  <a href=\"javascript:\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-grid\"></i></span><span class=\"pcoded-mtext\">Integration Reports</span></a>--> \n                        <ul class=\"pcoded-submenu\">\n                            <li class=\"\"><a href=\"/ui-button.html\" class=\"\">Users</a></li>\n                            <li class=\"\"><a href=\"/ui-badges.html\" class=\"\">Change Password</a></li>\n                        </ul>\n                    </li>\n                                                       <li class=\"nav-item pcoded-menu-caption\">\n                        <label>Helps</label>\n                    </li>\n                                        <li data-username=\"helps\"\n                        class=\"nav-item {% if 'ui-tables' in segment %} active {% endif %}\">\n                        <a href=\"/ui-tables.html\" class=\"nav-link \"><span class=\"pcoded-micon\"><i class=\"feather icon-server\"></i></span><span class=\"pcoded-mtext\">Help</span></a>\n                    </li>\n\n\n                </ul>\n            </div>\n        </div>\n    </nav>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/templates/includes/sidebar.html b/apps/templates/includes/sidebar.html
--- a/apps/templates/includes/sidebar.html	
+++ b/apps/templates/includes/sidebar.html	
@@ -50,15 +50,9 @@
                             <li class=""><a href="{% url 'statesList' %}" class="{{states}}">States</a></li>
                             <li class=""><a href="{% url 'citiesList' %}" class="{{cities}}">{% trans 'Cities' %}</a></li>
                             <li class=""><a href="{% url 'currenciesList' %}" class="{{currencies}}">Currencies</a></li>
-<<<<<<< HEAD
-                            <li class=""><a href="{% url 'businessList' %}"  class="">Business Types</a></li>
-                            <li class=""><a href="{% url 'teamsList' %}" class="">Teams/Departments</a></li>
-                            <li class=""><a href="{% url 'telecomsList' %}"  class="">Telecom Operator</a></li>
-=======
                             <li class=""><a href="{% url 'businessList' %}" class="{{business_types}}">Business Types</a></li>
                             <li class=""><a href="{% url 'teamsList' %}" class="{{teams_departments}}">Teams/Departments</a></li>
                             <li class=""><a href="/ui-icons.html" class="">Telecom Operator</a></li>
->>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d
                             <li class=""><a href="/ui-icons.html" class="">Billing Cycle</a></li>
                         </ul>
                     </li>
@@ -86,11 +80,11 @@
                     </li>
 
 
-                                                               <li data-username="ouloug services" class="nav-item pcoded-hasmenu">
-                        <a href="javascript:" class="nav-link "><span class="pcoded-micon"><i class="feather icon-grid"></i></span><span class="pcoded-mtext">Customers</span></a>
+                                                               <li data-username="customers" class="nav-item pcoded-hasmenu">
+                        <a href="javascript:" class="nav-link {{customers}}"><span class="pcoded-micon"><i class="feather icon-grid"></i></span><span class="pcoded-mtext">Customers</span></a>
                         <ul class="pcoded-submenu">
                             <li class=""><a href="/ui-button.html" class="">Customer's List</a></li>
-                            <li class=""><a href="/ui-badges.html" class="">Customer Calls</a></li>
+                            <li class=""><a href="{% url 'customerCallsList' %}" class="{{customer_calls}}">Customer Calls</a></li>
                             <li class=""><a href="/ui-breadcrumb-pagination.html" class="">Payments</a></li>
                             <li class=""><a href="/ui-collapse.html" class="">Telecom Phone Numbers</a></li>
                         </ul>
@@ -112,13 +106,9 @@
                     {% endif %}
                     {% endif %}
                                                      <li class="nav-item pcoded-menu-caption">
-                        <label>Settings</label>
-                    </li>
-                        <li class="nav-item pcoded-menu-caption">
                         <label>Settings</label>
                     </li>
-                                <li data-username="ouloug services" class="nav-item pcoded-hasmenu">
-                        <a href="javascript:" class="nav-link {{ouloug_services}} "><span class="pcoded-micon"><i class="feather icon-grid"></i></span><span class="pcoded-mtext">Settings</span></a>
+                                                               <li data-username="ouloug services" class="nav-item pcoded-hasmenu">
                      <!--  <a href="javascript:" class="nav-link "><span class="pcoded-micon"><i class="feather icon-grid"></i></span><span class="pcoded-mtext">Integration Reports</span></a>--> 
                         <ul class="pcoded-submenu">
                             <li class=""><a href="/ui-button.html" class="">Users</a></li>
Index: apps/customers/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\nfrom apps.customers.views import (BusinessTypeListView, BusinessTypeFormView,AgentShiftFormView,AgentShiftListView\n                                  )\nurlpatterns = [\n    path('business/', BusinessTypeListView.as_view(), name=\"businessList\"),\n\n    path('business/addBusiness', BusinessTypeFormView.as_view(), name=\"addBusiness\"),\n    path('agentShifts/', AgentShiftListView.as_view(), name=\"agentShiftsList\"),\n\n    path('agentShifts/addAgentShifts', AgentShiftFormView.as_view(), name=\"addAgentShifts\"),\n  \n]\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/customers/urls.py b/apps/customers/urls.py
--- a/apps/customers/urls.py	
+++ b/apps/customers/urls.py	
@@ -1,6 +1,8 @@
 from django.urls import path
-from apps.customers.views import (BusinessTypeListView, BusinessTypeFormView,AgentShiftFormView,AgentShiftListView
-                                  )
+from apps.customers.views import (BusinessTypeListView, BusinessTypeFormView,
+                                  AgentShiftFormView,AgentShiftListView,
+CustomerCallListView,
+                        )
 urlpatterns = [
     path('business/', BusinessTypeListView.as_view(), name="businessList"),
 
@@ -8,7 +10,8 @@
     path('agentShifts/', AgentShiftListView.as_view(), name="agentShiftsList"),
 
     path('agentShifts/addAgentShifts', AgentShiftFormView.as_view(), name="addAgentShifts"),
-  
+    path('customers/customerCalls', CustomerCallListView.as_view(), name="customerCallsList"),
+
 ]
 
 
Index: Util/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.mixins import PermissionRequiredMixin\nfrom django.shortcuts import redirect\n\n\nclass EnablePartialUpdateMixin:\n    \"\"\"Enable partial updates\n\n    Override partial kwargs in UpdateModelMixin class\n    https://github.com/encode/django-rest-framework/blob/91916a4db14cd6a06aca13fb9a46fc667f6c0682/rest_framework/mixins.py#L64\n    \"\"\"\n    def update(self, request, *args, **kwargs):\n        kwargs['partial'] = True\n        return super().update(request, *args, **kwargs)\nimport datetime\nfrom django.core.validators import MaxValueValidator\nimport string\nimport random\ndef current_year():\n    return datetime.date.today().year\n\n\ndef max_value_current_year(value):\n    return MaxValueValidator(current_year())(value)\n\ndef rand_slug():\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(20))\nSMS_USERNAME = 'uniseal'\nSMS_PASSWORD = '823178'\ndef check_string_search_phrase(search_phrase):\n    import re\n    temp_holder = search_phrase\n    special_char = re.findall(r'\\W', temp_holder.replace(\" \", \"\"))\n    # returns true if search_phrase contains special chars and returns search_phrase without leading spaces\n    return len(special_char) > 0 , search_phrase.strip()\n# TODO add logic to this function to use it later in the search functionality\n\ndef check_phone_number(phone):\n    import re\n    default_regex = r'^9\\d{8}$|^1\\d{8}$'\n    another_regex = r'^09\\d{8}$|^01\\d{8}$'\n    if re.findall(default_regex, phone):\n        return True,re.findall(default_regex,phone)[0]\n    elif re.findall(another_regex,phone):\n        return True, re.findall(another_regex,phone)[0][1:]\n    else:\n        return False,''\n\nclass SearchMan:\n    search_error = False\n\n    def __init__(self,model):\n        from django.core.paginator import Paginator\n        from django.db.models import Count\n        if model == \"Country\":\n            from apps.address.models import Country\n            countries = Country.objects.all().order_by(\"id\")\n            self.paginator = Paginator(countries, 5)\n        if model == \"City\":\n            from apps.address.models import City\n            cities = City.objects.all().order_by(\"id\")\n            self.paginator = Paginator(cities, 5)\n        if model == \"State\":\n            from apps.address.models import State\n            states = State.objects.all().order_by(\"id\")\n            self.paginator = Paginator(states, 5)\n        if model == \"Service\":\n            from apps.services.models import Service\n            services = Service.objects.all().order_by(\"id\")\n            self.paginator = Paginator(services, 5)\n        if model == \"BusinessType\":\n            from apps.customers.models import BusnessType\n            business_types = BusnessType.objects.all().order_by(\"id\")\n            self.paginator = Paginator(business_types, 5)\n        if model == \"Team\":\n            from apps.teams.models import Team\n            teams = Team.objects.all().order_by(\"id\")\n            self.paginator = Paginator(teams, 5)\n        if model == \"AgentShift\":\n            from apps.customers.models import AgentShift\n            agentShifts = AgentShift.objects.all().order_by(\"id\")\n            self.paginator = Paginator(agentShifts, 5)\n\n\n\n\n\n    def setPaginator(self,query):\n        from django.core.paginator import Paginator\n        self.paginator = Paginator(query, 60)\n\n    def getPaginator(self):\n        return self.paginator\n    search = False\n    search_phrase = ''\n    search_option = ''\n    def setSearch(self,bool):\n        self.search = bool\n    def getSearch(self):\n        return self.search\n    def setSearchPhrase(self,phrase):\n        self.search_phrase = phrase\n    def getSearchPhrase(self):\n        return  self.search_phrase\n    def setSearchOption(self, option):\n        self.search_option = option\n    def getSearchOption(self):\n        return self.search_option\n    def setSearchError(self,bool):\n        self.search_error=bool\n    def getSearchError(self):\n        return self.search_error\n\n\"\"\"\nOulougGroupPermission Class:\nThis class is used to specify allowed user types for system models\n\"\"\"\n\n\nclass OulougGroupPermission(PermissionRequiredMixin):\n    # by default allow only users of ouloug_admin and ouloug_monitor\n    #  to access the countries' pages\n    permission_required = ('administrator', 'monitor')\n\n    # check if the logged-in user has the access permission or not\n    def has_permission(self):\n        user_types = self.get_permission_required()\n        # check user type\n        for user_type in user_types:\n            if self.request.user.is_authenticated:\n                if self.request.user.user_type == user_type:\n                    return True\n            else:\n                return redirect('login')\n\n        # groups = self.get_permission_required()\n        # user_groups = self.request.user.groups.values('name')\n        # for group in groups:\n        #     for user_group in user_groups:\n        #         if user_group['name'] == group:\n        #             return True\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Util/utils.py b/Util/utils.py
--- a/Util/utils.py	
+++ b/Util/utils.py	
@@ -79,6 +79,10 @@
             from apps.customers.models import AgentShift
             agentShifts = AgentShift.objects.all().order_by("id")
             self.paginator = Paginator(agentShifts, 5)
+        if model == "CustomerCall":
+            from apps.customers.models import CustomerCall
+            customerCalls = CustomerCall.objects.all().order_by("id")
+            self.paginator = Paginator(customerCalls, 5)
 
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n<<<<<<< HEAD\n    <list default=\"true\" id=\"4df8213c-cf37-447d-9ac1-c838995dea69\" name=\"Changes\" comment=\"\" />\n=======\n    <list default=\"true\" id=\"4df8213c-cf37-447d-9ac1-c838995dea69\" name=\"Changes\" comment=\"Resolving issues related to teams and business type\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/DAILY_CHANGES.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/DAILY_CHANGES.md\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Util/static_strings.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Util/static_strings.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Util/utils.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Util/utils.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/apps/customers/urls.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/apps/customers/urls.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/apps/customers/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/apps/customers/views.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/apps/telecoms/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/apps/telecoms/views.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/apps/templates/includes/sidebar.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/apps/templates/includes/sidebar.html\" afterDir=\"false\" />\n    </list>\n>>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"HTML File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"HARD\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"263S0iTJh50snTZU0iGpZ51Qou6\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/apps/templates/agent_shift\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/apps/templates/agent_shift\" />\n      <recent name=\"$PROJECT_DIR$/apps/packages\" />\n      <recent name=\"$PROJECT_DIR$/apps/templates/package\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"run\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"Ouloug\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"$PROJECT_DIR$/../ouloug_venv/bin/python\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/manage.py\" />\n      <option name=\"PARAMETERS\" value=\"runserver 8009\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"4df8213c-cf37-447d-9ac1-c838995dea69\" name=\"Changes\" comment=\"\" />\n      <created>1646650580189</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1646650580189</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Resolving issues related to teams and business type\">\n      <created>1646670924402</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1646670924402</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Resolving issues related to teams and business type\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Resolving issues related to teams and business type\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,20 +4,20 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-<<<<<<< HEAD
-    <list default="true" id="4df8213c-cf37-447d-9ac1-c838995dea69" name="Changes" comment="" />
-=======
-    <list default="true" id="4df8213c-cf37-447d-9ac1-c838995dea69" name="Changes" comment="Resolving issues related to teams and business type">
+    <list default="true" id="4df8213c-cf37-447d-9ac1-c838995dea69" name="Changes" comment="all changes are specified in the DAILY_CHANGES.md file">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/DAILY_CHANGES.md" beforeDir="false" afterPath="$PROJECT_DIR$/DAILY_CHANGES.md" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Util/static_strings.py" beforeDir="false" afterPath="$PROJECT_DIR$/Util/static_strings.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Util/utils.py" beforeDir="false" afterPath="$PROJECT_DIR$/Util/utils.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/apps/address/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/apps/address/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/apps/customers/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/apps/customers/models.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/apps/customers/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/apps/customers/urls.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/apps/customers/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/apps/customers/views.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/apps/telecoms/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/apps/telecoms/views.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/apps/templates/business_type/add_business_type.html" beforeDir="false" afterPath="$PROJECT_DIR$/apps/templates/business_type/add_business_type.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/apps/templates/includes/sidebar.html" beforeDir="false" afterPath="$PROJECT_DIR$/apps/templates/includes/sidebar.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/apps/templates/teams/add_teams.html" beforeDir="false" afterPath="$PROJECT_DIR$/apps/templates/teams/add_teams.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/apps/templates/telcoms/add_telcoms.html" beforeDir="false" afterPath="$PROJECT_DIR$/apps/templates/telcoms/add_telcoms.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/apps/templates/telcoms/includes/includes.html" beforeDir="false" afterPath="$PROJECT_DIR$/apps/templates/telcoms/includes/includes.html" afterDir="false" />
     </list>
->>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -32,7 +32,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-    <option name="RESET_MODE" value="HARD" />
+    <option name="RESET_MODE" value="MIXED" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
@@ -51,10 +51,12 @@
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/apps/templates/agent_shift" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/apps/templates/customer_call/customer_call_includes" />
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/apps/templates/customer_call/customer_call_includes" />
+      <recent name="$PROJECT_DIR$/apps/templates/customer_call" />
       <recent name="$PROJECT_DIR$/apps/templates/agent_shift" />
       <recent name="$PROJECT_DIR$/apps/packages" />
       <recent name="$PROJECT_DIR$/apps/templates/package" />
@@ -99,7 +101,14 @@
       <option name="project" value="LOCAL" />
       <updated>1646670924402</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="all changes are specified in the DAILY_CHANGES.md file">
+      <created>1646674282361</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1646674282361</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -115,6 +124,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Resolving issues related to teams and business type" />
-    <option name="LAST_COMMIT_MESSAGE" value="Resolving issues related to teams and business type" />
+    <MESSAGE value="all changes are specified in the DAILY_CHANGES.md file" />
+    <option name="LAST_COMMIT_MESSAGE" value="all changes are specified in the DAILY_CHANGES.md file" />
   </component>
 </project>
\ No newline at end of file
Index: apps/address/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\nfrom apps.customers.views import(BusinessListView , BusinessFormView )\nfrom apps.address.views import (CountryListView,CountryFormView,\n                                CityFormView,CityListView,StateFormView,StateListView , CurrencyListView , CurrencyFormView )\nurlpatterns = [\n    path('countries/', CountryListView.as_view(), name=\"countriesList\"),\n    path('countries/addCountries', CountryFormView.as_view(), name=\"addCountries\"),\n    path('cities/', CityListView.as_view(), name=\"citiesList\"),\n    path('cities/addCities', CityFormView.as_view(), name=\"addCities\"),\n    path('states/', StateListView.as_view(), name=\"statesList\"),\n    path('states/addStates', StateFormView.as_view(), name=\"addStates\"),\n\n    path('currencies/', CurrencyListView.as_view(), name=\"currenciesList\"),\n    path('currecnies/addCurrencies', CurrencyFormView.as_view(), name=\"addCurrencies\"),\n\n    path('business/', BusinessListView.as_view(), name=\"businessList\"),\n\n    path('business/addBusiness', BusinessFormView.as_view(), name=\"addBusiness\"),\n\n    #This for businees type\n\n    #path('currencies/', CurrencyListView.as_view(), name=\"currenciesList\"),\n  #  path('states/addCurrencies', CurrencyFormView.as_view(), name=\"addCurrencies\"),\n\n]\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/address/urls.py b/apps/address/urls.py
--- a/apps/address/urls.py	
+++ b/apps/address/urls.py	
@@ -1,7 +1,6 @@
 from django.urls import path
-from apps.customers.views import(BusinessListView , BusinessFormView )
 from apps.address.views import (CountryListView,CountryFormView,
-                                CityFormView,CityListView,StateFormView,StateListView , CurrencyListView , CurrencyFormView )
+                                CityFormView,CityListView,StateFormView,StateListView , CurrencyListView , CurrencyFormView)
 urlpatterns = [
     path('countries/', CountryListView.as_view(), name="countriesList"),
     path('countries/addCountries', CountryFormView.as_view(), name="addCountries"),
@@ -12,12 +11,7 @@
 
     path('currencies/', CurrencyListView.as_view(), name="currenciesList"),
     path('currecnies/addCurrencies', CurrencyFormView.as_view(), name="addCurrencies"),
-
-    path('business/', BusinessListView.as_view(), name="businessList"),
-
-    path('business/addBusiness', BusinessFormView.as_view(), name="addBusiness"),
-
-    #This for businees type
+#This for businees type 
 
     #path('currencies/', CurrencyListView.as_view(), name="currenciesList"),
   #  path('states/addCurrencies', CurrencyFormView.as_view(), name="addCurrencies"),
Index: apps/templates/business_type/add_business_type.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"layouts/base.html\" %}\n\n{% block title %}{{title}}{% endblock %}\n{% load static i18n %}\n\n{% load crispy_forms_tags %}\n<!-- Specific CSS goes HERE -->\n{% block stylesheets %}{% endblock stylesheets %}\n{% block pages_name %}\n{% trans 'Business' %}\n{% endblock pages_name %}\n\n{% block header%}\n<<<<<<< HEAD\n {% include 'templates/business_type_includes/header.html' %}\n=======\n {% include 'business_type/business_type_includes/header.html' %}\n>>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d\n<li class=\"breadcrumb-item\"><a href=\"{% url 'addBusiness' %}\">{% trans 'Add Business' %}</a></li>\n\n\n{% endblock header %}\n{% block content %}\n\n\n\n                    <div class=\"main-body\">\n            <div class=\"page-wrapper\">\n                <!-- [ Main Content ] start -->\n                <div class=\"row\">\n                    <div class=\"col-sm-12\">\n                        <div class=\"card\">\n                            <div class=\"card-header\">\n                                <h5>{% trans 'Add Business' %}</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <form autocomplete=\"off\"  method=\"post\" action=\"\">\n                                            {% csrf_token %}\n\n                                            <div class=\"form-group\">\n                                                {{form.type_name|as_crispy_field}}\n\n                                            </div>\n                                            <div class=\"form-group\">\n                                                {{form.arabic_type_name|as_crispy_field}}\n                                            </div>\n\n\n                                              <div>\n                                               {{form.other_flag|as_crispy_field}}\n\n                                            </div>\n\n                                     \n                                            <button type=\"submit\" class=\"btn btn-primary\">{% trans 'Add Business Type' %}</button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                    </div>\n\n\n{% endblock content %}\n\n<!-- Specific Page JS goes HERE  -->\n{% block javascripts %}{% endblock javascripts %}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/templates/business_type/add_business_type.html b/apps/templates/business_type/add_business_type.html
--- a/apps/templates/business_type/add_business_type.html	
+++ b/apps/templates/business_type/add_business_type.html	
@@ -11,11 +11,8 @@
 {% endblock pages_name %}
 
 {% block header%}
-<<<<<<< HEAD
  {% include 'templates/business_type_includes/header.html' %}
-=======
  {% include 'business_type/business_type_includes/header.html' %}
->>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d
 <li class="breadcrumb-item"><a href="{% url 'addBusiness' %}">{% trans 'Add Business' %}</a></li>
 
 
Index: apps/templates/teams/add_teams.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"layouts/base.html\" %}\n\n{% block title %}{{title}}{% endblock %}\n{% load static i18n %}\n\n{% load crispy_forms_tags %}\n<!-- Specific CSS goes HERE -->\n{% block stylesheets %}{% endblock stylesheets %}\n{% block pages_name %}\n{% trans 'Teams' %}\n{% endblock pages_name %}\n\n{% block header%}\n<<<<<<< HEAD\n {% include 'templates/teams/includes/header.html' %}\n=======\n {% include 'teams/includes/header.html' %}\n>>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d\n<li class=\"breadcrumb-item\"><a href=\"{% url 'addTeams' %}\">{% trans 'Add Teams' %}</a></li>\n\n\n{% endblock header %}\n{% block content %}\n\n\n                    <div class=\"main-body\">\n            <div class=\"page-wrapper\">\n                <!-- [ Main Content ] start -->\n                <div class=\"row\">\n                    <div class=\"col-sm-12\">\n                        <div class=\"card\">\n                            <div class=\"card-header\">\n                                <h5>{% trans 'Add Team' %}</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <form autocomplete=\"off\"  method=\"post\" action=\"\">\n                                            {% csrf_token %}\n\n                                            <div class=\"form-group\">\n                                                {{form.name|as_crispy_field}}\n\n                                                <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                {{form.arabic_name|as_crispy_field}}\n                                            </div>\n                                             <div class=\"form-group\">\n                                                {{form.country|as_crispy_field}}\n                                            </div>\n                                             <div class=\"form-group\">\n                                                {{form.user|as_crispy_field}}\n                                            </div>\n                                           \n\n                                            <button type=\"submit\" class=\"btn btn-primary\">{% trans 'Add Team' %}</button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                    </div>\n\n\n{% endblock content %}\n\n<!-- Specific Page JS goes HERE  -->\n{% block javascripts %}{% endblock javascripts %}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/templates/teams/add_teams.html b/apps/templates/teams/add_teams.html
--- a/apps/templates/teams/add_teams.html	
+++ b/apps/templates/teams/add_teams.html	
@@ -11,11 +11,7 @@
 {% endblock pages_name %}
 
 {% block header%}
-<<<<<<< HEAD
- {% include 'templates/teams/includes/header.html' %}
-=======
  {% include 'teams/includes/header.html' %}
->>>>>>> 3ecac1cbbda6e818b9be38609958ab8cb67b4f0d
 <li class="breadcrumb-item"><a href="{% url 'addTeams' %}">{% trans 'Add Teams' %}</a></li>
 
 
Index: apps/customers/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\nfrom apps.address.models import City, Country\nfrom apps.authentication.models import User\nfrom apps.packages.models import Package, PackageBillingType, PackageService\nfrom apps.teams.models import Team\nfrom apps.address.models import Currency\nfrom apps.telecoms.models import TelecomNumber\n\n\"\"\"\nCustomer Model:\nit's used to save the customer's details\n\"\"\"\nCUSTOMER_PURCHASE_STATUS = (\n    ('paid', 'Paid'),\n    (\"pending\", \"Pending\"),\n    (\"trial\", \"Trial\")\n)\nCUSTOMER_ACCOUNT_STATUS = (\n    (\"not_confirmed\", \"Not Confirmed\"),\n    (\"active\", \"Active\"),\n    (\"suspended\", \"Suspended\"),\n    (\"closed\", \"Closed\"),\n    (\"blocked\", \"Blocked\"),\n    (\"dormant\", \"Dormant\"),\n    (\"stopped\", \"Stopped\")\n)\n\n\nclass Customer(models.Model):\n    # this field is a foreign key referenced from the user model\n    # which represents the custmoer user\n    user = models.ForeignKey(User, on_delete=models.DO_NOTHING,\n                             blank=True, null=True, related_name=\"customer\")\n    # this field represents the business name\n    business_name = models.CharField(max_length=224)\n    # this field represents the business name in Arabic\n    arabic_business_name = models.CharField(max_length=200)\n    # this field represents the short name used to refer to the business\n    business_shortname = models.CharField(max_length=50)\n    # this field represents list of business types\n    business_type = models.CharField(max_length=200)\n    # this field represents the other business type (if not found on list)\n    business_type_other = models.CharField(max_length=200)\n    # this field represents the official address of the business\n    business_address_one = models.CharField(max_length=200)\n    # this field is a foreign key referenced from the city model\n    # which represents the city\n    business_address_city = models.ForeignKey(City, on_delete=models.SET_NULL, null=True, blank=True)\n    # this field represents the business logo\n    logo = models.CharField(max_length=200)\n    # this field represents the official registration number of the business\n    registration_number = models.IntegerField()\n    # this field represents the date of establishing the business\n    established_date = models.DateField(max_length=200)\n    # this field represents the admin mobile number\n    admin_mobile_number = models.IntegerField()\n    # this field represents the account status\n    account_status = models.CharField(max_length=80, choices=CUSTOMER_ACCOUNT_STATUS)\n    # this field represents the purchase status\n    purchase_status = models.CharField(max_length=40)\n    # this field represents the email field which\n    # will be used to send notification related to customer\n    email = models.EmailField(max_length=200)\n    # this field represents the expiry date and time of billing/renewal of billing\n    expiry_datetime = models.DateTimeField()\n    # this field represents the actual date and when the customer\n    # activated its account\n    effective_datetime = models.DateTimeField(auto_now=True)\n    # this field represents the date and time when this account was added\n    added_datetime = models.DateTimeField(auto_created=True)\n\n    def __str__(self):\n        # objects of this model will be referenced by their business names\n        return self.business_name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer\"\n\n\n\"\"\"\nAgent Shift Model:\nit's used to specify the default shift/work\ntime for the agent per team/department\n\"\"\"\nAGENT_CHOICES = (\n    (\"active\", \"Active\"),\n    (\"not_active\", \"Not Active\"),\n\n)\n\n\nclass AgentShift(models.Model):\n    # this is a foreign key field referenced from Country model\n    # which is used to represent the country model\n    country = models.ForeignKey(Country, on_delete=models.CASCADE)\n    # this is a foreign key field referenced from team model\n    # which is used to represent the team model\n    team = models.ForeignKey(Team, on_delete=models.CASCADE)\n    # this field represents the shift number\n    number = models.IntegerField()\n    # this field represents the shift name\n    name = models.CharField(max_length=200)\n    # this field represents the shift name in Arabic\n    arabic_name = models.CharField(max_length=200)\n    # this field represents the starting date of the shift/work\n    start_date = models.DateField()\n    # this field represents the ending date of the shift/work\n    end_date = models.DateField()\n    # this field represents the starting time of the shift\n    start_time = models.TimeField()\n    # this field represents the ending time of the shift\n    end_time = models.TimeField()\n    # this field represents the status\n    status = models.CharField(max_length=10,\n                              choices=AGENT_CHOICES)\n    # this a boolean field which represents\n    # if the shift is working on Saturdays or not\n    is_saturday_on = models.BooleanField()\n    # this a boolean field which represents\n    # if the shift is working on Sundays or not\n    is_sunday_on = models.BooleanField()\n    # this a boolean field which represents\n    # if the shift is working on Mondays or not\n    is_monday_on = models.BooleanField()\n    # this a boolean field which represents\n    # if the shift is working on Tuesdays or not\n    is_tuesday_on = models.BooleanField()\n    # this a boolean field which represents\n    # if the shift is working on Wednesdays or not\n    is_wednesday_on = models.BooleanField()\n    # this a boolean field which represents\n    # if the shift is working on Thursdays or not\n    is_thursday_on = models.BooleanField()\n    # this a boolean field which represents\n    # if the shift is working on Fridays or not\n    is_friday_on = models.BooleanField()\n\n    def __str__(self):\n        # objects of this model will be referenced using their names\n        return self.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"agent_shift\"\n\n\n\"\"\"\nCustomer Agent Shift Model:\nit's used to to retrieve recorders from Agent Shift model\nso the customer can change the default values as per need.\n\"\"\"\n\n\nclass CustomerAgentShift(models.Model):\n    # this field is a foreign key referenced from the agent model\n    # which is used to represent the agent shift\n    agent_shift = models.ForeignKey(AgentShift, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field is a foreign key referenced from the customer model\n    # which is used to represent the customer\n    customer = models.ForeignKey(Customer, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field represents the shift number\n    shift_number = models.CharField(max_length=200)\n    # this field represents the shift name\n    shift_name = models.CharField(max_length=200)\n    # this field represents the shift name in Arabic\n    arabic_shift_name = models.CharField(max_length=200)\n    # this field represents the start date\n    start_date = models.DateField()\n    # this field represents the end date\n    end_date = models.DateField()\n    # this field represents the start time\n    start_time = models.TimeField()\n    # this field represents the end time\n    end_time = models.TimeField()\n    # this field represents the state\n    status = models.BooleanField()\n\n    def __str__(self):\n        # objects of this model will be referenced by their shift names\n        return self.shift_name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_agent_shift\"\n\n\n\"\"\"\nCustomer Agent model:\nit's used to contain all call center agents/employees\ndetails of the customer, this details like agent name,\nusername to access the SIP account and password, and account\nto access the portal.\n\"\"\"\nLOGIN_STATUS = (\n    (\"login\", \"Login\"),\n    (\"logout\", \"Logout\"),\n    (\"break\", \"Break\"),\n    (\"busy\", \"Busy\"),\n    (\"on_leave\", \"On leave\"),\n\n)\n\n\nclass CustomerAgent(models.Model):\n    # this is a foreign key field references the team model\n    # which represents the team\n    team = models.ForeignKey(Team, on_delete=models.CASCADE)\n    # this is a foreign key field references the team model\n    # which represents the team\n    city = models.ForeignKey(City, on_delete=models.CASCADE)\n    # this field represents the communication extension/dial number\n    # associated with agent\n    extension_number = models.CharField(max_length=140)\n    # this field represents the first work address\n    first_work_address = models.CharField(max_length=200)\n    # this field represents the second work address\n    second_work_address = models.CharField(max_length=200)\n    # this field represents the account status\n    account_status = models.CharField(max_length=40, choices=CUSTOMER_ACCOUNT_STATUS)\n    # this field represents the login status\n    login_status = models.CharField(max_length=10,\n                                    choices=LOGIN_STATUS, )\n    # this field represents the date and time when this record was added\n    added_datetime = models.DateTimeField(auto_now=True)\n    # this field represents the date and time when this record was last modified\n    last_modification_datetime = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        # objects of this model will be referenced by their team's name\n        return self.team.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_agent\"\n\n\n\"\"\"\nCustomer Call Model:\nit's used to save call transactions for customers\n\"\"\"\nCALL_DIRECTION = (\n    (\"inbound\", \"Inbound\"),\n    (\"outbound\", \"Outbound\")\n)\nCALL_TYPE = (\n    (\"normal\", \"Normal\"),\n    (\"group\", \"Group\")\n)\nCALL_STATUS = (\n    (\"complete\", \"Complete\"),\n    (\"not_answered\", \"Not Answered\"),\n    (\"rejected\", \"Rejected\"),\n    (\"busy\", \"Busy\"),\n    (\"waiting\", \"Waiting\"),\n    (\"not_completed\", \"Not Completed\"),\n)\n\n\nclass CustomerCall(models.Model):\n    # this is a foreign key field references the country model\n    # which represents the country\n    country = models.ForeignKey(Country, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this is a foreign key field references the customer model\n    # which represents the customer\n    customer = models.ForeignKey(Customer, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this is a foreign key field references the customer agent model\n    # which represents the customer agent\n    customer_agent = models.ForeignKey(CustomerAgent, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field represents the call date and time\n    call_datetime = models.DateTimeField(auto_now=True)\n    # this field represents the login status of the agent when the call has been made\n    login_status = models.CharField(max_length=80, choices=LOGIN_STATUS)\n    # this field represents the call direction\n    call_direction = models.CharField(max_length=40, choices=CALL_DIRECTION)\n    # this field represents the call type\n    call_type = models.CharField(max_length=40, choices=CALL_TYPE)\n    # this field represents the call duration\n    call_duration = models.TimeField(auto_now_add=True)\n    # this field represents the start time\n    start_time = models.TimeField(auto_now=True)\n    # this field represents the end time\n    end_time = models.TimeField()\n    # this field represents the status\n    status = models.CharField(max_length=80, choices=CALL_STATUS)\n\n    def __str__(self):\n        # Objects of this model will be referenced by this phrase: \"Call For: \" then customer's name\n        return \"Call For: \" + self.customer.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_call\"\n\n\n\"\"\"\nCustomer Package Model:\nit's used to save subscribed package by the customer\n\"\"\"\nSUBSCRIPTION_STATUS = (\n    (\"active\", \"Active\"),\n    (\"trial\", \"Trial\"),\n    (\"suspended\", \"Suspended\"),\n    (\"not_paid\", \"Not Paid\"),\n    (\"deleted\", \"Deleted\"),\n)\n\n\nclass CustomerPackage(models.Model):\n    # this is a foreign key referenced from the customer model\n    # which represents the customer model\n    customer = models.ForeignKey(Customer, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this is a foreign key referenced from the package model\n    # which represents the package model\n    package = models.ForeignKey(Package, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field is foreign key field references the package billing model\n    # which represents the package billing type\n    package_billing_type = models.ForeignKey(PackageBillingType, on_delete=models.CASCADE)\n    # this field is a foreign key references the currency model\n    # which represents the currency\n    currency = models.ForeignKey(Currency, models.CASCADE)\n    # this field represents the total amount of subscription\n    subscription_amount = models.DecimalField(decimal_places=10,max_digits=12)\n    # this field represents the pending amount to be paid by the customer\n    due_amount = models.DecimalField(decimal_places=10,max_digits=12)\n    # this field represents the date and time when a record was created\n    customer_package_datetime = models.DateTimeField(auto_now=True)\n    # this field represents the starting active subscription\n    effective_date = models.DateField()\n    # this field represents the expiration date and time for a subscription\n    expiry_date = models.DateTimeField()\n    # this field represents the deletion date and time\n    delete_date = models.DateTimeField()\n    # this field represents the subscription status\n    subscription_status = models.CharField(max_length=40, choices=SUBSCRIPTION_STATUS)\n\n    def __str__(self):\n        # objects of this model will be referenced using the customer's name followed by the package's name\n        return self.customer.name + \" -- \" + self.package.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_package\"\n\n\n\"\"\"\nCustomer Payment Model:\nit's used to save records for all customers transactions\n\"\"\"\n\n\nclass CustomerPayment(models.Model):\n    # this field is a foreign key references the customer model\n    # which represents the customer\n    customer = models.ForeignKey(Customer, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field is a foreign key references the customer package model\n    # which represents the customer package\n    customer_package = models.ForeignKey(Package, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field represents the transaction's date and time\n    transaction_datetime = models.DateTimeField(auto_now=True)\n    # this field represents the transaction's amount\n    transaction_amount = models.DecimalField(decimal_places=10,max_digits=12)\n    # this field is a foreign key references the currency model\n    # which represents the currency\n    currency = models.ForeignKey(Currency, on_delete=models.CASCADE)\n    # this field represents the payment type\n    payment_type = models.CharField(max_length=100)\n    # this field represents the status\n    status = models.BooleanField(editable=True)\n\n    def __str__(self):\n        # objects for this model will be referenced by the customer's name\n        return \"Payment For: \" + self.customer.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_payment\"\n\n\n\"\"\"\nCustomer Agent Shifts Attendant Model:\nit's used to save recordes of the customer's agent shifts\n\"\"\"\n\n\nclass CustomerAgentShiftsAttendant(models.Model):\n    # this is a foreign key references the customer agent shift model\n    # which represents the customer agent shift\n    customer_agent_shift = models.ForeignKey(CustomerAgentShift, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this is a foreign key references the customer agent  model\n    # which represents the customer agent\n    customer_agent = models.ForeignKey(CustomerAgent, on_delete=models.CASCADE)\n    # this field represents the shift data and time\n    shift_datetime = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        # objects of this model will be referenced by their customer agent's name\n        # followed by the customer agent shift's name\n        return self.customer_agent.name + \" -- \" + self.customer_agent_shift.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_agent_shift_attendant\"\n\n\n\"\"\"\nCustomer Call Participant Model:\nit's used to save details of the participating agents \nand clients in the call with the agent. the call can be one to one\nor conference call\n\"\"\"\n\n\nclass CustomerCallParticipant(models.Model):\n    # this is a foreign key field referenced from the customer call model\n    # which represents the customer call\n    customer_call = models.ForeignKey(CustomerCall, on_delete=models.DO_NOTHING, blank=True, null=True)\n    # this field represents the initiator of the call\n    caller = models.CharField(max_length=150)\n    # this field represents the receiver of the call\n    calle = models.CharField(max_length=200)\n    # this field represents the start time\n    start_time = models.TimeField(blank=True)\n    # this field represents the end time\n    end_time = models.TimeField(blank=True)\n    # this field represents the time duration\n    time_duration = models.DurationField()\n    # this field represents the call status\n    call_status = models.CharField(max_length=40,\n                                   choices=CALL_STATUS)\n\n    def __str__(self):\n        # objects of this model will be referenced by the caller and calle names\n        return \"Caller is: \" + str(self.caller) + \" Receiver is: \" + str(self.calle)\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_call_participant\"\n\n\n\"\"\"\nCustomer Package Service Model:\nit's used to define the customer selected services in the package\n\"\"\"\n\n\nclass CustomerPackageService(models.Model):\n    # this field is a foreign key referenced from the customer package model\n    # which represents the customer package\n    customer_package = models.ForeignKey(CustomerPackage, on_delete=models.CASCADE)\n    # this field is a foreign key referenced from the package service model\n    # which represents the package service\n    package_service = models.ForeignKey(PackageService, on_delete=models.CASCADE)\n    # this field represents the subscription type value\n    subscription_type_value = models.IntegerField()\n    # this field represents the service price\n    service_price = models.DecimalField(decimal_places=10,max_digits=12)\n    # this field represents the total price amount\n    total_price = models.DecimalField(decimal_places=10,max_digits=12)\n    # this field is a foreign key referenced from the currency model\n    # which represents the currency\n    currency_code = models.ForeignKey(Currency, on_delete=models.CASCADE)\n\n    def __str__(self):\n        # objects of this model will be referenced by the customer's package name and the package's service name\n        return self.customer_package.name + ' -- ' + self.package_service.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_package_service\"\n\n\n\"\"\"\nCustomer Team Model:\nit's used to associate the team/department name with\nthe customer. the default values will fetched from the teams master\ntable but the customer can rename an add custom team name for his own\nmanagement\n\"\"\"\nCUSTOMER_TEAM_STATUS = (\n    (\"active\", \"Active\"),\n    (\"not_active\", \"Not Active\")\n)\n\n\nclass CustomerTeam(models.Model):\n    # this field is foreign key referenced the customer model\n    # which represents the customer\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    # this field is foreign key referenced the team model\n    # which represents the team\n    team = models.ForeignKey(Team, on_delete=models.CASCADE)\n    # this field represents the default team working address\n    address_one = models.CharField(max_length=200)\n    # this field represents the second team working address\n    address_second = models.CharField(max_length=200)\n    # this field is foreign key referenced the city model\n    # which represents the city\n    city = models.ForeignKey(City, on_delete=models.CASCADE)\n    # this field represents the status\n    status = models.CharField(max_length=40, choices=CUSTOMER_TEAM_STATUS)\n    # this field is a foreign key referenced from the User model\n    # which represents the user that added this record\n    added_by = models.ForeignKey(User, null=True, blank=True,\n                                 on_delete=models.SET_NULL, related_name=\"user_added_customer_team\")\n    # this field is a foreign key from the User model ,\n    # which represents the last user that modified this record\n    last_modified_by = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True,\n                                         related_name=\"last_user_modified_customer_team\")\n    # this field represents the date and time when this record was added\n    added_datetime = models.DateTimeField(auto_now=True)\n    # this field represents the date and time when this record was last modified\n    last_modification_datetime = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        # objects of this model will be referenced by their cutomer's name followed by the team's name\n        return self.customer.name + \" -- \" + self.team.name\n\n    class Meta:\n        # this is the actual model's name in the database\n        db_table = \"customer_team\"\n\n\n\"\"\"\nCustomer Telecom Number Model:\nit's used to associate the telecom/phone number with the customer.\nthe selected phone number by customer\n\"\"\"\nCUSTOMER_TELECOM_NUMBER_STATUS = (\n    (\"active\", \"Active\"),\n    (\"stop\", \"Stop\"),\n    (\"withdraw\", \"Withdraw\"),\n)\n\n\nclass CustomerTelecomNumber(models.Model):\n    # this is foreign key field references the customer model\n    # which represents the customer\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    # this is foreign key field references the telecom number model\n    # which represents the telecom number\n    telecom_number = models.ForeignKey(TelecomNumber, on_delete=models.CASCADE)\n    # this field represents the actual telephone number\n    actual_telephone_number = models.CharField(max_length=80)\n    # this field represents the memo\n    memo = models.TextField()\n    # this field represents the taken date\n    taken_date = models.DateTimeField()\n    # this field represents withdrawal date\n    withdraw_date = models.DateTimeField()\n    # this field represents the status\n    status = models.CharField(max_length=50,\n                              choices=CUSTOMER_TELECOM_NUMBER_STATUS)\n\n    def __str__(self):\n        # objects of this model will be referenced by customer's\n        # name and telecom's number name\n        return self.customer.name + \" -- \" + self.telecom_number.name\n\n    class Meta:\n        # this is the actual name of the model in the database\n        db_table = \"customer_telecom_number\"\n\n\n\n# bussines type mmodel\n\n\nclass BusnessType(models.Model):\n\n    # this is foreign key field references the added-by\n\n    added_by = models.ForeignKey(User, null=True, blank=True,\n                                 on_delete=models.SET_NULL, related_name=\"user_added_business_type\")\n\n    last_modified_by = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True,\n                                         related_name=\"last_user_modified_business_type\")\n    # this field represents the business type name\n    type_name = models.CharField(max_length=240)\n    arabic_type_name = models.CharField(max_length=240)\n    other_flag = models.CharField(max_length=1)\n\n    added_datetime = models.DateTimeField(auto_now=True)\n    last_modification_datetime = models.DateTimeField(auto_now_add=True)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/customers/models.py b/apps/customers/models.py
--- a/apps/customers/models.py	
+++ b/apps/customers/models.py	
@@ -150,8 +150,6 @@
 it's used to to retrieve recorders from Agent Shift model
 so the customer can change the default values as per need.
 """
-
-
 class CustomerAgentShift(models.Model):
     # this field is a foreign key referenced from the agent model
     # which is used to represent the agent shift
